<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 4.0.2-dev (doctrine2-zf2inputfilterannotation dev) on 2024-05-01
 * 15:13:23.
 * Goto
 * https://github.com/mysql-workbench-schema-exporter/mysql-workbench-schema-exporter
 * for more information.
 */

namespace Base\Entity;

use Doctrine\ORM\Mapping as ORM;
use Laminas\InputFilter\InputFilter;
use Laminas\InputFilter\Factory as InputFactory;
use Laminas\InputFilter\InputFilterAwareInterface;
use Laminas\InputFilter\InputFilterInterface;

/**
 * Base\Entity\OauthScopes
 *
 * @ORM\Entity(repositoryClass="OauthScopesRepository")
 * @ORM\Table(name="oauth_scopes", options={})
 */
class OauthScopes implements InputFilterAwareInterface
{
    /**
     * Instance of InputFilterInterface.
     *
     * @var InputFilter
     */
    private $inputFilter;

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(name="`type`", type="string", length=255, options={"default": "'supported'"})
     */
    protected $type = 'supported';

    /**
     * @ORM\Column(name="`scope`", type="string", length=2000, nullable=true, options={"default": NULL})
     */
    protected $scope;

    /**
     * @ORM\Column(type="string", length=80, nullable=true, options={"default": NULL})
     */
    protected $client_id;

    /**
     * @ORM\Column(type="smallint", nullable=true, options={"default": NULL})
     */
    protected $is_default;

    public function __construct()
    {
    }

    /**
     * Set the value of id.
     *
     * @param int $id
     *
     * @return \Base\Entity\OauthScopes
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of type.
     *
     * @param string $type
     *
     * @return \Base\Entity\OauthScopes
     */
    public function setType($type)
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Get the value of type.
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set the value of scope.
     *
     * @param string $scope
     *
     * @return \Base\Entity\OauthScopes
     */
    public function setScope($scope)
    {
        $this->scope = $scope;

        return $this;
    }

    /**
     * Get the value of scope.
     *
     * @return string
     */
    public function getScope()
    {
        return $this->scope;
    }

    /**
     * Set the value of client_id.
     *
     * @param string $client_id
     *
     * @return \Base\Entity\OauthScopes
     */
    public function setClientId($client_id)
    {
        $this->client_id = $client_id;

        return $this;
    }

    /**
     * Get the value of client_id.
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->client_id;
    }

    /**
     * Set the value of is_default.
     *
     * @param int $is_default
     *
     * @return \Base\Entity\OauthScopes
     */
    public function setIsDefault($is_default)
    {
        $this->is_default = $is_default;

        return $this;
    }

    /**
     * Get the value of is_default.
     *
     * @return int
     */
    public function getIsDefault()
    {
        return $this->is_default;
    }

    /**
     * Not used, Only defined to be compatible with InputFilterAwareInterface.
     * 
     * @param \Laminas\InputFilter\InputFilterInterface $inputFilter
     * @throws \Exception
     */
    public function setInputFilter(InputFilterInterface $inputFilter)
    {
        throw new \Exception("Not used.");
    }

    /**
     * Return a for this entity configured input filter instance.
     *
     * @return InputFilterInterface
     */
    public function getInputFilter()
    {
        if ($this->inputFilter instanceof InputFilterInterface) {
            return $this->inputFilter;
        }
        $factory = new InputFactory();
        $filters = [
            [
                'name' => 'id',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\ToInt'],
                                ],
                'validators' => [
                                    ['name' => 'Laminas\I18n\Validator\IsInt'],
                                ],
            ],
            [
                'name' => 'type',
                'required' => true,
                'filters' => [
                                    ['name' => 'Laminas\Filter\StripTags'],
                                    ['name' => 'Laminas\Filter\StringTrim'],
                                ],
                'validators' => [
                                    [
                                        'name' => 'Laminas\Validator\StringLength',
                                        'options' => [
                                            'encoding' => 'UTF-8',
                                            'min' => 1,
                                            'max' => 255
                                        ],
                                    ],
                                ],
            ],
            [
                'name' => 'scope',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\StripTags'],
                                    ['name' => 'Laminas\Filter\StringTrim'],
                                ],
                'validators' => [
                                    [
                                        'name' => 'Laminas\Validator\StringLength',
                                        'options' => [
                                            'encoding' => 'UTF-8',
                                            'min' => 0,
                                            'max' => 2000
                                        ],
                                    ],
                                ],
            ],
            [
                'name' => 'client_id',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\StripTags'],
                                    ['name' => 'Laminas\Filter\StringTrim'],
                                ],
                'validators' => [
                                    [
                                        'name' => 'Laminas\Validator\StringLength',
                                        'options' => [
                                            'encoding' => 'UTF-8',
                                            'min' => 0,
                                            'max' => 80
                                        ],
                                    ],
                                ],
            ],
            [
                'name' => 'is_default',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\ToInt'],
                                ],
                'validators' => [
                                    ['name' => 'Laminas\I18n\Validator\IsInt'],
                                ],
            ],
        ];
        $this->inputFilter = $factory->createInputFilter($filters);

        return $this->inputFilter;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = [])
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }

    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = [])
    {
        $dataFields = ['id', 'type', 'scope', 'client_id', 'is_default'];
        $relationFields = [];
        $copiedFields = [];
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, [$relationField]);
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return ['id', 'type', 'scope', 'client_id', 'is_default'];
    }
}