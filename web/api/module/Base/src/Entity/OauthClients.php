<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 4.0.2-dev (doctrine2-zf2inputfilterannotation dev) on 2024-05-01
 * 15:13:23.
 * Goto
 * https://github.com/mysql-workbench-schema-exporter/mysql-workbench-schema-exporter
 * for more information.
 */

namespace Base\Entity;

use Doctrine\ORM\Mapping as ORM;
use Laminas\InputFilter\InputFilter;
use Laminas\InputFilter\Factory as InputFactory;
use Laminas\InputFilter\InputFilterAwareInterface;
use Laminas\InputFilter\InputFilterInterface;

/**
 * Base\Entity\OauthClients
 *
 * @ORM\Entity(repositoryClass="OauthClientsRepository")
 * @ORM\Table(name="oauth_clients", options={})
 */
class OauthClients implements InputFilterAwareInterface
{
    /**
     * Instance of InputFilterInterface.
     *
     * @var InputFilter
     */
    private $inputFilter;

    /**
     * @ORM\Id
     * @ORM\Column(type="string", length=80)
     */
    protected $client_id;

    /**
     * @ORM\Column(type="string", length=80)
     */
    protected $client_secret;

    /**
     * @ORM\Column(type="string", length=2000)
     */
    protected $redirect_uri;

    /**
     * @ORM\Column(type="string", length=80, nullable=true, options={"default": NULL})
     */
    protected $grant_types;

    /**
     * @ORM\Column(name="`scope`", type="string", length=2000, nullable=true, options={"default": NULL})
     */
    protected $scope;

    /**
     * @ORM\Column(type="integer", nullable=true, options={"default": NULL})
     */
    protected $user_id;

    /**
     * @ORM\Column(name="`name`", type="string", length=200, nullable=true, options={"default": NULL})
     */
    protected $name;

    /**
     * @ORM\Column(type="string", length=80, nullable=true, options={"default": NULL})
     */
    protected $client_password;

    public function __construct()
    {
    }

    /**
     * Set the value of client_id.
     *
     * @param string $client_id
     *
     * @return \Base\Entity\OauthClients
     */
    public function setClientId($client_id)
    {
        $this->client_id = $client_id;

        return $this;
    }

    /**
     * Get the value of client_id.
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->client_id;
    }

    /**
     * Set the value of client_secret.
     *
     * @param string $client_secret
     *
     * @return \Base\Entity\OauthClients
     */
    public function setClientSecret($client_secret)
    {
        $this->client_secret = $client_secret;

        return $this;
    }

    /**
     * Get the value of client_secret.
     *
     * @return string
     */
    public function getClientSecret()
    {
        return $this->client_secret;
    }

    /**
     * Set the value of redirect_uri.
     *
     * @param string $redirect_uri
     *
     * @return \Base\Entity\OauthClients
     */
    public function setRedirectUri($redirect_uri)
    {
        $this->redirect_uri = $redirect_uri;

        return $this;
    }

    /**
     * Get the value of redirect_uri.
     *
     * @return string
     */
    public function getRedirectUri()
    {
        return $this->redirect_uri;
    }

    /**
     * Set the value of grant_types.
     *
     * @param string $grant_types
     *
     * @return \Base\Entity\OauthClients
     */
    public function setGrantTypes($grant_types)
    {
        $this->grant_types = $grant_types;

        return $this;
    }

    /**
     * Get the value of grant_types.
     *
     * @return string
     */
    public function getGrantTypes()
    {
        return $this->grant_types;
    }

    /**
     * Set the value of scope.
     *
     * @param string $scope
     *
     * @return \Base\Entity\OauthClients
     */
    public function setScope($scope)
    {
        $this->scope = $scope;

        return $this;
    }

    /**
     * Get the value of scope.
     *
     * @return string
     */
    public function getScope()
    {
        return $this->scope;
    }

    /**
     * Set the value of user_id.
     *
     * @param int $user_id
     *
     * @return \Base\Entity\OauthClients
     */
    public function setUserId($user_id)
    {
        $this->user_id = $user_id;

        return $this;
    }

    /**
     * Get the value of user_id.
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->user_id;
    }

    /**
     * Set the value of name.
     *
     * @param string $name
     *
     * @return \Base\Entity\OauthClients
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get the value of name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set the value of client_password.
     *
     * @param string $client_password
     *
     * @return \Base\Entity\OauthClients
     */
    public function setClientPassword($client_password)
    {
        $this->client_password = $client_password;

        return $this;
    }

    /**
     * Get the value of client_password.
     *
     * @return string
     */
    public function getClientPassword()
    {
        return $this->client_password;
    }

    /**
     * Not used, Only defined to be compatible with InputFilterAwareInterface.
     * 
     * @param \Laminas\InputFilter\InputFilterInterface $inputFilter
     * @throws \Exception
     */
    public function setInputFilter(InputFilterInterface $inputFilter)
    {
        throw new \Exception("Not used.");
    }

    /**
     * Return a for this entity configured input filter instance.
     *
     * @return InputFilterInterface
     */
    public function getInputFilter()
    {
        if ($this->inputFilter instanceof InputFilterInterface) {
            return $this->inputFilter;
        }
        $factory = new InputFactory();
        $filters = [
            [
                'name' => 'client_id',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\StripTags'],
                                    ['name' => 'Laminas\Filter\StringTrim'],
                                ],
                'validators' => [
                                    [
                                        'name' => 'Laminas\Validator\StringLength',
                                        'options' => [
                                            'encoding' => 'UTF-8',
                                            'min' => 1,
                                            'max' => 80
                                        ],
                                    ],
                                ],
            ],
            [
                'name' => 'client_secret',
                'required' => true,
                'filters' => [
                                    ['name' => 'Laminas\Filter\StripTags'],
                                    ['name' => 'Laminas\Filter\StringTrim'],
                                ],
                'validators' => [
                                    [
                                        'name' => 'Laminas\Validator\StringLength',
                                        'options' => [
                                            'encoding' => 'UTF-8',
                                            'min' => 1,
                                            'max' => 80
                                        ],
                                    ],
                                ],
            ],
            [
                'name' => 'redirect_uri',
                'required' => true,
                'filters' => [
                                    ['name' => 'Laminas\Filter\StripTags'],
                                    ['name' => 'Laminas\Filter\StringTrim'],
                                ],
                'validators' => [
                                    [
                                        'name' => 'Laminas\Validator\StringLength',
                                        'options' => [
                                            'encoding' => 'UTF-8',
                                            'min' => 1,
                                            'max' => 2000
                                        ],
                                    ],
                                ],
            ],
            [
                'name' => 'grant_types',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\StripTags'],
                                    ['name' => 'Laminas\Filter\StringTrim'],
                                ],
                'validators' => [
                                    [
                                        'name' => 'Laminas\Validator\StringLength',
                                        'options' => [
                                            'encoding' => 'UTF-8',
                                            'min' => 0,
                                            'max' => 80
                                        ],
                                    ],
                                ],
            ],
            [
                'name' => 'scope',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\StripTags'],
                                    ['name' => 'Laminas\Filter\StringTrim'],
                                ],
                'validators' => [
                                    [
                                        'name' => 'Laminas\Validator\StringLength',
                                        'options' => [
                                            'encoding' => 'UTF-8',
                                            'min' => 0,
                                            'max' => 2000
                                        ],
                                    ],
                                ],
            ],
            [
                'name' => 'user_id',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\ToInt'],
                                ],
                'validators' => [
                                    ['name' => 'Laminas\I18n\Validator\IsInt'],
                                ],
            ],
            [
                'name' => 'name',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\StripTags'],
                                    ['name' => 'Laminas\Filter\StringTrim'],
                                ],
                'validators' => [
                                    [
                                        'name' => 'Laminas\Validator\StringLength',
                                        'options' => [
                                            'encoding' => 'UTF-8',
                                            'min' => 0,
                                            'max' => 200
                                        ],
                                    ],
                                ],
            ],
            [
                'name' => 'client_password',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\StripTags'],
                                    ['name' => 'Laminas\Filter\StringTrim'],
                                ],
                'validators' => [
                                    [
                                        'name' => 'Laminas\Validator\StringLength',
                                        'options' => [
                                            'encoding' => 'UTF-8',
                                            'min' => 0,
                                            'max' => 80
                                        ],
                                    ],
                                ],
            ],
        ];
        $this->inputFilter = $factory->createInputFilter($filters);

        return $this->inputFilter;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = [])
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }

    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = [])
    {
        $dataFields = ['client_id', 'client_secret', 'redirect_uri', 'grant_types', 'scope', 'user_id', 'name', 'client_password'];
        $relationFields = [];
        $copiedFields = [];
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, [$relationField]);
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return ['client_id', 'client_secret', 'redirect_uri', 'grant_types', 'scope', 'user_id', 'name', 'client_password'];
    }
}